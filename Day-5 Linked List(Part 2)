//Day-3(Module 23- Linked List)-24/07/2024

//Creating a Linked List

/* public class LinkedList {
    public static class Node{ //class
        int data;
        Node next;

        public Node(int data){//constructor
            this.data=data;
            this.next=null;
        }
    }

    public static Node head;
    public static Node tail;
    public static void main(String[] args) {
        LinkedList ll=new LinkedList();
        ll.head=new Node(1);
        ll.head.next=new Node(2);
    }
}
 */

 //Adding first node--T.C-O(1), adding Last node--T.C-O(1), and printing the linked list-T.C-O(n), Add Node-T.C.O(n), Size of a LL.

/* public class LinkedList {
    public class Node{
        int data;
        Node next;

        public Node(int data){
            this.data=data;
            this.next=null;
        }
    
    }
    public static Node head;
    public static Node tail;
    public static int  size;

    public void addFirst(int data){
         //step-1 create new Node
         Node newNode=new Node(data);
         size++;
         if(head==null){
            head=tail=newNode;
            return;
         }
        //step-2 NewNode next=head;
        newNode.next=head; //link
        //step-3 head=newNode;
        head=newNode;
    }

    public void addLast(int data){
        Node newNode=new Node(data);
        size++;
        if(head==null){
            head=tail=newNode;
            return;
        }
        tail.next=newNode;
        tail=newNode;
        
    }

    public void printLL(){
        if(head==null){
            System.out.println("LL is empty");
        }
        Node temp=head;
        while(temp!=null){
        System.out.print(temp.data+"-->");
        temp=temp.next;
        }
        System.out.println("");
        
    }
    
    public void add(int idx,int data){
        if(idx==0){
            addFirst(data);
            return;
        }
        Node newNode=new Node(data);
        size++;
        Node temp=head;
    
        //finding index
        int i=0;
        while(i<idx-1){
         temp=temp.next;
         i++;   
        }

        newNode.next=temp.next;
        temp.next=newNode;
        

    }

    public static void main(String[] args) {
        LinkedList ll =new LinkedList();
        ll.printLL();
        ll.addFirst(2);
        ll.printLL();
        ll.addFirst(4);
        ll.printLL();
        ll.addLast(6);
        ll.printLL();
        ll.addLast(8);
        ll.printLL();
        ll.add(2, 10);
        ll.printLL();

        System.out.println(ll.size);
    }

} */

//Day-4 (Linked List)-Part 1

//Remove first from linked list

/* 
public class LinkedList {
    public class Node{
        int data;
        Node next;

        public Node(int data){
            this.data=data;
            this.next=null;
        }
    
    }
    public static Node head;
    public static Node tail;
    public static int  size;

    public void addFirst(int data){
         //step-1 create new Node
         Node newNode=new Node(data);
         size++;
         if(head==null){
            head=tail=newNode;
            return;
         }
        //step-2 NewNode next=head;
        newNode.next=head; //link
        //step-3 head=newNode;
        head=newNode;
    }

    public void addLast(int data){
        Node newNode=new Node(data);
        size++;
        if(head==null){
            head=tail=newNode;
            return;
        }
        tail.next=newNode;
        tail=newNode;
        
    }

    public void printLL(){
        if(head==null){
            System.out.println("LL is empty");
        }
        Node temp=head;
        while(temp!=null){
        System.out.print(temp.data+"-->");
        temp=temp.next;
        }
        System.out.println("");
        
    }
    
    public void add(int idx,int data){
        if(idx==0){
            addFirst(data);
            return;
        }
        Node newNode=new Node(data);
        size++;
        Node temp=head;
    
        //finding index
        int i=0;
        while(i<idx-1){
         temp=temp.next;
         i++;   
        }

        newNode.next=temp.next;
        temp.next=newNode;
        

    }

    public int removeFirst(){
        if(size==0){
            System.out.println("LL is empty");
            return Integer.MIN_VALUE;
        }else if(size==1){          
            int val=head.data;
            head=tail=null;
            size=0;
            return val;
        } 
        int val=head.data;
        head=head.next;
        size--;
        return val;

    }

    public int removeLast(){
        if(size==0){
            System.out.println("LL is empty");
            return Integer.MIN_VALUE; 
        }else if(size==1){
            int val=head.data;
            head=tail=null;
            size--;
            return val;
        }
        Node prev=head;
        //prev=>i=size-2
        for(int i=0;i<size-2;i++){
            prev=prev.next;
        }
        int val=prev.next.data; //tail.data
        prev.next=null;
        tail=prev;
        size--;
        return val;                
    }


//Search for a key index linearly in LL -T.C.-O(n)
public int itrSearch(int key){
    Node temp=head;
    int i=0;
    while(temp!=null){
        if(temp.data==key){
            return i;
        }

        temp=temp.next;
        i++;
    }

    return -1;
}


public int helper(Node head,int key){// T.C.-O(n),S.C-O(n)
    if(head==null){
        return -1;
    }
    if(head.data==key){
        return 0;
    }

    int idx=helper(head.next, key);
    if(idx==-1){
        return -1;
    }
    return idx+1;
}

public int recSearch(int Key){
    return helper(head, Key);
}


//reverse a  Linked List-T.C.-O(n)

public void reversedLL(){
    Node prev=null;
    Node curr=tail=head;
    Node next;

    while(curr!= null){
        next=curr.next;
        curr.next=prev;
        prev=curr;
        curr=next;
    }
    head=prev;
}

//Delete/ Remove Nth Node from the end

public void deleteNthNodeFromEnd(int n){

    //calculate size
    int sz=0;
    Node temp=head;
    while(temp!=null){
        temp=temp.next;
        sz++;
    }

    if(n==sz){
        //removeFirst
        head=head.next;
        return;
    }

    //finding prev node
    int i=1;
    int iToFind=sz-n;
    Node prev=head;
    while (i<iToFind) {
        prev=head.next;
        i++;
    }
    prev.next=prev.next.next;
    return;

}
    public static void main(String[] args) {
        LinkedList ll =new LinkedList();
        ll.printLL();
        ll.addFirst(2);
        ll.printLL();
        ll.addFirst(4);
        ll.printLL();
        ll.addLast(6);
        ll.printLL();
        ll.addLast(8);
        ll.printLL();
        ll.add(2, 10);
        ll.printLL();
        //ll.removeFirst();
        ll.printLL();
       // ll.removeLast();
        //ll.printLL();
        //ll.reversedLL();
        //ll.printLL();
        ll.deleteNthNodeFromEnd(3);
        ll.printLL();

        System.out.println(ll.size);
        // System.out.println(ll.itrSearch(10));
        // System.out.println(ll.itrSearch(20));
        // System.out.println(ll.recSearch(10));
        // System.out.println(ll.itrSearch(20));
        

}
}
 */

//Day-1(Module-24 Linked List(Part-1))--30/07/2024



public class LinkedList {
    public class Node{
        int data;
        Node next;

        public Node(int data){
            this.data=data;
            this.next=null;
        }
    
    }
    public static Node head;
    public static Node tail;
    public static int  size;

    public void addFirst(int data){
         //step-1 create new Node
         Node newNode=new Node(data);
         size++;
         if(head==null){
            head=tail=newNode;
            return;
         }
        //step-2 NewNode next=head;
        newNode.next=head; //link
        //step-3 head=newNode;
        head=newNode;
    }

    public void addLast(int data){
        Node newNode=new Node(data);
        size++;
        if(head==null){
            head=tail=newNode;
            return;
        }
        tail.next=newNode;
        tail=newNode;
        
    }

    public void printLL(){
        if(head==null){
            System.out.println("LL is empty");
        }
        Node temp=head;
        while(temp!=null){
        System.out.print(temp.data+"-->");
        temp=temp.next;
        }
        System.out.println("");
        
    }
    
    public void add(int idx,int data){
        if(idx==0){
            addFirst(data);
            return;
        }
        Node newNode=new Node(data);
        size++;
        Node temp=head;
    
        //finding index
        int i=0;
        while(i<idx-1){
         temp=temp.next;
         i++;   
        }

        newNode.next=temp.next;
        temp.next=newNode;
        

    }

    public int removeFirst(){
        if(size==0){
            System.out.println("LL is empty");
            return Integer.MIN_VALUE;
        }else if(size==1){          
            int val=head.data;
            head=tail=null;
            size=0;
            return val;
        } 
        int val=head.data;
        head=head.next;
        size--;
        return val;

    }

    public int removeLast(){
        if(size==0){
            System.out.println("LL is empty");
            return Integer.MIN_VALUE; 
        }else if(size==1){
            int val=head.data;
            head=tail=null;
            size--;
            return val;
        }
        Node prev=head;
        //prev=>i=size-2
        for(int i=0;i<size-2;i++){
            prev=prev.next;
        }
        int val=prev.next.data; //tail.data
        prev.next=null;
        tail=prev;
        size--;
        return val;                
    }


//Search for a key index linearly in LL -T.C.-O(n)

public int itrSearch(int key){
    Node temp=head;
    int i=0;
    while(temp!=null){
        if(temp.data==key){
            return i;
        }

        temp=temp.next;
        i++;
    }

    return -1;
}

//Recursive Search  for a key in LL;

public int helper(Node head,int key){// T.C.-O(n),S.C-O(n)
    if(head==null){
        return -1;
    }
    if(head.data==key){
        return 0;
    }

    int idx=helper(head.next, key);
    if(idx==-1){
        return -1;
    }
    return idx+1;
}

public int recSearch(int Key){
    return helper(head, Key);
}


//reverse a  Linked List-T.C.-O(n)

public void reversedLL(){
    Node prev=null;
    Node curr=tail=head;
    Node next;

    while(curr!= null){
        next=curr.next;
        curr.next=prev;
        prev=curr;
        curr=next;
    }
    head=prev;
}

//Delete/ Remove Nth Node from the end

public void deleteNthNodeFromEnd(int n){

    //calculate size
    int sz=0;
    Node temp=head;
    while(temp!=null){
        temp=temp.next;
        sz++;
    }

    if(n==sz){
        //removeFirst
        head=head.next;
        return;
    }

    //finding prev node
    int i=1;
    int iToFind=sz-n;
    Node prev=head;
    while (i<iToFind) {
        prev=head.next;
        i++;
    }
    prev.next=prev.next.next;
    return;

}

//Check if LL is palindrome or not

public Node findMidNode(Node head){ //finding mid node;
    Node slow=head;
    Node fast=head;

    while (fast!=null && fast.next!=null) {
        slow=slow.next;
        fast=fast.next.next;
    }
    return slow;
}

public boolean isPalindrome(){
    //step-1 find midNode
    Node midNode=findMidNode(head);

    //step-2- reverse 2nd half

    Node prev=null;
    Node curr=midNode;
    Node next;

    while(curr!= null){
        next=curr.next;
        curr.next=prev;
        prev=curr;
        curr=next;
    }

    //step-3 check if first half==2nd half
    Node left=head;
    Node right=prev;

    while(right!=null){
        if(left.data!=right.data){
            return false;
        }
        left=left.next;
        right=right.next;
    }
    return true;

}
    public static void main(String[] args) {
        LinkedList ll =new LinkedList();
        ll.printLL();
        ll.addFirst(1);
        ll.printLL();
        ll.addFirst(2);
        ll.printLL();
        ll.addLast(2);
        ll.printLL();
        ll.addLast(1);
        ll.printLL();
        //ll.add(2, 10);
        ll.printLL();
        //ll.removeFirst();
        ll.printLL();
       // ll.removeLast();
        //ll.printLL();
        //ll.reversedLL();
        //ll.printLL();
       // ll.deleteNthNodeFromEnd(3);
        ll.printLL();

        System.out.println(ll.size);
        System.out.println(ll.isPalindrome());
        // System.out.println(ll.itrSearch(10));
        // System.out.println(ll.itrSearch(20));
        // System.out.println(ll.recSearch(10));
        // System.out.println(ll.itrSearch(20));
}
}



