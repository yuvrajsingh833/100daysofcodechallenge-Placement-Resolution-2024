//Day-2(Module-25-Linked List(Part-2))-31/07/2024

/* public class LinkList {

    public static class Node{
        int data;
        Node next;

        public Node(int data){
            this.data=data;
            this.next=null;
        }
    }
    public static Node head;
    //To detect LL is in Cycle or not(Flyod's Cycle Finding Algorithm)

    public static boolean isCycle(){
        Node slow=head;
        Node fast=head;

        while(fast!=null && fast.next!=null){
            slow=slow.next; //+1
            fast=fast.next.next; //+2
            if(slow==fast){
                return true; //exist cycle
            }
        }
        return false; //does not exist cycle

    }

    public static void main(String[] args) {
        head= new Node(1);
        head.next=new Node(2);
        head.next.next=new Node(3);
        head.next.next.next=head;;
        //1-->2-->3-->1;
        System.out.println(isCycle());


    }
    
} */


//Remove Cycle in Linked List

public class LinkList {

    public static class Node{
        int data;
        Node next;

        public Node(int data){
            this.data=data;
            this.next=null;
        }
    }
    public static Node head;

    //To detect LL is in Cycle or not(Flyod's Cycle Finding Algorithm)

    public static boolean isCycle(){
        Node slow=head;
        Node fast=head;

        while(fast!=null && fast.next!=null){
            slow=slow.next; //+1
            fast=fast.next.next; //+2
            if(slow==fast){
                return true; //exist cycle
            }
        }
        return false; //does not exist cycle

    }

    //Remove Cycle;

    public static void removeCycle(){
        //Detect cycle
        Node slow=head;
        Node fast=head;
        boolean cycle=false;

        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast){
                cycle=true;
                break;
            }
        }
        if(cycle==false){
            return;
        }

        //find meeting point
        slow=head;
        Node prev=null; //last node
        while(slow!=fast){
            prev=fast;
            
            
            
            fast=fast.next;
        }

        //remove cycle
        prev.next=null;

    }

    public static void main(String[] args) {
        head= new Node(1);
        Node temp=new Node(2);
        head.next=temp;
        head.next.next=new Node(3);
        head.next.next.next=temp;
        //1-->2-->3-->2;
        System.out.println(isCycle());
        removeCycle();
        System.out.println(isCycle());
        


    }
    
}
